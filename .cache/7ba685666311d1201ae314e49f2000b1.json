{"dependencies":[{"name":"/Users/davidbastian/Sites/ar/package.json","includedInParent":true,"mtime":1519875653000},{"name":"/Users/davidbastian/Sites/ar/.babelrc","includedInParent":true,"mtime":1519853599000},{"name":"/Users/davidbastian/Sites/ar/node_modules/posthtml-expressions/package.json","includedInParent":true,"mtime":1519865198000}],"generated":{"js":"'use strict';\n\n/**\n * @description Replace String based on RegExp\n *\n * @method escapeRegexpString\n *\n * @param  {String}   input Input\n *\n * @return {Function} input Replaced Input\n */\n\nfunction escapeRegexpString(input) {\n  // match Operators\n  const match = /[|\\\\{}()[\\]^$+*?.]/;\n\n  return input.replace(match, '\\\\$&');\n}\n\n/**\n * @module escape\n *\n * @type {Function}\n */\nmodule.exports = escapeRegexpString;","map":{"mappings":[{"generated":{"line":1,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":12,"column":0}},{"name":"escapeRegexpString","generated":{"line":13,"column":9},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":12,"column":9}},{"generated":{"line":13,"column":27},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":12,"column":0}},{"name":"input","generated":{"line":13,"column":28},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":12,"column":29}},{"generated":{"line":13,"column":33},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":12,"column":0}},{"generated":{"line":13,"column":35},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":12,"column":36}},{"generated":{"line":14,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":13,"column":2}},{"generated":{"line":15,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":14,"column":2}},{"name":"match","generated":{"line":15,"column":8},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":14,"column":8}},{"generated":{"line":15,"column":16},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":14,"column":16}},{"generated":{"line":15,"column":36},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":14,"column":2}},{"generated":{"line":17,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":2}},{"name":"input","generated":{"line":17,"column":9},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":9}},{"name":"replace","generated":{"line":17,"column":15},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":15}},{"generated":{"line":17,"column":22},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":9}},{"name":"match","generated":{"line":17,"column":23},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":23}},{"generated":{"line":17,"column":28},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":9}},{"generated":{"line":17,"column":30},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":30}},{"generated":{"line":17,"column":36},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":9}},{"generated":{"line":17,"column":37},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":16,"column":2}},{"generated":{"line":18,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":17,"column":1}},{"generated":{"line":20,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":19,"column":0}},{"name":"module","generated":{"line":25,"column":0},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":24,"column":0}},{"name":"exports","generated":{"line":25,"column":7},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":24,"column":7}},{"generated":{"line":25,"column":14},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":24,"column":0}},{"name":"escapeRegexpString","generated":{"line":25,"column":17},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":24,"column":17}},{"generated":{"line":25,"column":35},"source":"node_modules/posthtml-expressions/lib/escape.js","original":{"line":24,"column":0}}],"sources":{"node_modules/posthtml-expressions/lib/escape.js":"'use strict'\n\n/**\n * @description Replace String based on RegExp\n *\n * @method escapeRegexpString\n *\n * @param  {String}   input Input\n *\n * @return {Function} input Replaced Input\n */\nfunction escapeRegexpString (input) {\n  // match Operators\n  const match = /[|\\\\{}()[\\]^$+*?.]/\n\n  return input.replace(match, '\\\\$&')\n}\n\n/**\n * @module escape\n *\n * @type {Function}\n */\nmodule.exports = escapeRegexpString\n"},"lineCount":null}},"hash":"c1bd679a7e52fa2969dcadd271aebb35","cacheData":{"env":{}}}